# TODO:因为设置文件包含敏感信息，应该尽一切努力限制对它的访问。例如，更改其文件权限，以便只有您和您的 Web 服务器的用户可以读取它。
"""
Django settings for StudyDjango project.
Generated by 'django-admin startproject' using Django 3.2.
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # 获取项目的根路径

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

"""关键配置"""
CURRENT_ENV = os.environ.get('CURRENT_ENV', "dev")
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "123456")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if CURRENT_ENV == 'prod' else True
# 该配置避免你的站点遭受某些 CSRF 攻击。如果使用了通配符，你必须实现自定义的 Host HTTP 头，或者确保你不会很容易地遭受此种攻击。
ALLOWED_HOSTS = ['*'] if CURRENT_ENV == 'prod' else ['127.0.0.1']
# 默认电子邮件地址，用于网站管理员的各种自动通信。这不包括发送到ADMINS和MANAGERS的错误信息
DEFAULT_FROM_EMAIL = 'webmaster@example.com'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASSWORD'),
#         'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
#         'PORT': os.environ.get('DB_PORT', 5432),
#     }
# }

# Application definition
# 新建app需要加到这里
INSTALLED_APPS = [
    # 默认应用，为了方便大多数项目，如果不需要某个或某些应用，你可以在运行 migrate 前毫无顾虑注释或者删除掉它们
    'django.contrib.admin',  # 管理员站点
    'django.contrib.auth',  # 认证授权系统
    'django.contrib.contenttypes',  # 内容类型框架
    'django.contrib.sessions',  # 会话框架
    'django.contrib.messages',  # 消息框架
    'django.contrib.staticfiles',  # 管理静态文件的框架
    # 注册引入应用
    'haystack',
    'ckeditor',
    'ckeditor_uploader',
    'rest_framework',
    # 注册自定义应用
    'Apps.base',
    'Apps.study_drf',
    # 'Apps.comments',
    # 'Apps.company'
]

# TODO:使用自定义用户模型，完善user应用程序
# 设置认证系统中使用的用户模型, 例如这里指定为使用user应用程序中User模型
# AUTH_USER_MODEL = "blog.BlogUser"

# 中间件，响应前自动处理
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.middleware.TestMiddleware'  # 自定义中间件
]

# 指项目文件下同名文件夹下的urls，项目改名字这里也要改
ROOT_URLCONF = 'StudyDjango.urls'

# 指定模板路径 BASE_DIR是项目根路径，有别的模板也要加进来
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 添加如下配置，即可不用每个模板中添加{% load static %}
            'builtins': [
                'django.templatetags.static'
            ],
        },
    },
]

WSGI_APPLICATION = 'StudyDjango.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 语言格式
USE_I18N = False  # 是否使用国际化 (i18n) 功能
# LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]  # 设置以指定 Django 应在何处查找翻译文件

TIME_ZONE = 'Asia/Shanghai'  # 设置时区

USE_L10N = False  # 用于决定是否开启数据本地化。如果此设置为True，例如Django将使用当前语言环境的格式显示数字和日期。

USE_TZ = False  # 指定是否使用指定的时区(TIME_ZONE)的时间

# Django REST Framework 相关设置
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    # ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    # 身份认证后端——如果有多个认证，则有一个认证通过就算认证成功
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',   # 基本认证 —— 请求的时候传递用户名和密码，进行身份认证
        # 在drf视图(APIView)处理一个请求的过程中，会提取cookie中的sessionid，并在缓存中获取用户数据
        # 'rest_framework.authentication.SessionAuthentication',  # session认证
        # ......
    ),
    # 权限认证后端,有多个权限后端，遵循最严格的
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated', # 只有经过身份认证确定用户身份才能访问
        # 'rest_framework.permissions.IsAdminUser', # is_staff=True才能访问 —— 管理员(员工)权限
        'rest_framework.permissions.AllowAny',  # 允许所有
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly', # 有身份 或者 只读访问(self.list,self.retrieve)
    ),
    # 流量限制后端
    'DEFAULT_THROTTLE_CLASSES': (
        # 'rest_framework.throttling.AnonRateThrottle', # 限制匿名用户访问限制
        # 'rest_framework.throttling.UserRateThrottle', # 非匿名用户访问限制
        'rest_framework.throttling.ScopedRateThrottle',  # 自定义限流后端
    ),
    # 流量(请求次数)限制频率
    'DEFAULT_THROTTLE_RATES': {
        'anon': '3/day',  # 匿名用户访问次数     3/day  3/hour  3/second  3/minute
        'user': '5/day',  # 非匿名用户访问次数

        # 自定义限流后端的访问次数规则
        'books': '3/day',
        'heroes': '5/day'
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# 静态文件的路由（url）地址
STATIC_URL = '/static/'
STATIC_ROOT = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'  # 上传文件url前缀
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 上传的文件路径

# 登陆url和登陆后跳转url
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/index/'

# session设置
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # 引擎（默认）
SESSION_COOKIE_NAME = "sessionid"  # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）
SESSION_COOKIE_PATH = "/"  # Session的cookie保存的路径（默认）
SESSION_COOKIE_DOMAIN = None  # Session的cookie保存的域名（默认）
SESSION_COOKIE_SECURE = False  # 是否Https传输cookie（默认）
SESSION_COOKIE_HTTPONLY = True  # 是否Session的cookie只支持http传输（默认）
SESSION_COOKIE_AGE = 1209600  # Session的cookie失效日期（2周）（默认）
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # 是否关闭浏览器使得Session过期（默认）
SESSION_SAVE_EVERY_REQUEST = False  # 是否每次请求都保存Session，默认修改之后才保存（默认）
SESSION_CACHE_ALIAS = "default"  # 指定session使用的缓存配置

# csrf设置
CSRF_COOKIE_AGE = None  # CSRF cookie 的寿命，以秒为单位。
CSRF_COOKIE_DOMAIN = None  # 设置 CSRF cookie 时要使用的域
CSRF_COOKIE_HTTPONLY = False  # 是否对 CSRF cookie 使用 HttpOnly 标志
CSRF_COOKIE_NAME = "csrftoken"  # 用于 CSRF 认证令牌的 cookie 的名称
CSRF_COOKIE_PATH = "/"  # 在 CSRF cookie 上设置的路径
CSRF_COOKIE_SAMESITE = "Lax"  # CSRF cookie 上 SameSite 标志的值。该标志可防止在跨站点请求中发送 cookie。
CSRF_COOKIE_SECURE = False  # 是否为 CSRF cookie 使用安全 cookie
CSRF_USE_SESSIONS = False  # 是否将 CSRF 标记存储在用户的会话中，而不是 cookie 中
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'  # 当传入的请求被 CSRF 保护 拒绝时，要使用的视图函数的点分隔路径
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'  # 用于 CSRF 认证的请求头的名称。
CSRF_TRUSTED_ORIGINS = []  # 不安全请求的可信来源列表

# ckeditor设置
CKEDITOR_UPLOAD_PATH = 'ckeditor/'  # 设置富文本编辑器的上传文件的相对路径
CKEDITOR_IMAGE_BACKEND = 'pillow'  # 设置图片处理的引擎为pillow，用于生成图片缩略图，在编辑器里浏览上传的图片
CKEDITOR_BROWSE_SHOW_DIRS = True  # 在编辑器浏览上传的图片时，图片会以路径分组、以日期排序
# 限制用户浏览图片文件的权限、只能浏览自己上传的图片、图片会传到以用户名命名的文件夹下，但超级用户可以查看所有图片
CKEDITOR_RESTRICT_BY_USER = True
CKEDITOR_CONFIGS = {
    # 配置名是default时，django-ckeditor默认使用这个设置
    'default': {
        'toolbar': (
            ['div', 'Source', '-', 'Save', 'NewPage', 'Preview', '-', 'Templates'],
            ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Print', 'SpellChecker', 'Scayt'],
            ['Undo', 'Redo', '-', 'Find', 'Replace', '-', 'SelectAll', 'RemoveFormat'],
            ['Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton', 'HiddenField'],
            ['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', 'Superscript'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', 'Blockquote'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak'],
            ['Styles', 'Format', 'Font', 'FontSize'],
            ['TextColor', 'BGColor'],
            ['Maximize', 'ShowBlocks', '-', 'About', 'pbckcode'],
        ),
    },
    # 设置另一个django-ckeditor配置
    'test': {
        # 使用简体中文
        'language': 'zh-cn',
        # 设置富文本编辑器的宽度和高度
        'width': '660px',
        'height': '200px',
        # 设置工具栏为自定义，名字为Custom
        'toolbar': 'Custom',
        # 添加富文本编辑器的工具栏按钮
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList'],
            ['Image', 'Link', 'Unlink'],
            ['Maximize']
        ]
    },
}

HAYSTACK_CONNECTIONS = {
    'default': {
        # 指定了Django HAYSTACK要使用的搜索引擎，whoosh_backend_cn就是我们修改的文件
        'ENGINE': 'StudyDjango.whoosh_backend_cn.WhooshEngine',
        # 指定搜索文件存放的位置
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
}
# 指定搜索结果分页方式为每页6条记录
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 6
# 指定实时更新索引，当有数据改变时，自动更新索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

# 缓存设置,执行创建表命令python manage.py createcachetable
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'django_cache',
    }
}
# CACHES = {
#     # 默认存储信息: 存到 0 号库
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://192.168.0.100:6379/0",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }

# 日志设置
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'INFO',
#         },
#     },
# }
LOG_PATH = os.path.join(BASE_DIR, 'log')
LOGGING = {
    'version': 1,
    # 禁用日志
    'disable_existing_loggers': False,
    'loggers': {
        '': {
            # 将系统接受到的体制，交给handler去处理
            'handlers': ['console'],
            'level': 'INFO',
        }
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '%s/%s' % (LOG_PATH, 'django.log'),
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            # 'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        'console': {
            'level': 'INFO',
            # handler将日志信息存放在day6/logs/sys.log
            'filename': '%s/%s' % (LOG_PATH, 'django.log'),
            # 指定日志的格式
            'formatter': '',
            # 备份
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志文件大小：5M
            'maxBytes': 5 * 1024 * 1024,
            'encoding': "utf-8"
        }
    },
    'formatters': {
        'default': {
            'format': '%(asctime)s %(message)s'
        }
    }
}

# 错误日志管理系统
sentry_sdk.init(
    dsn="https://0937e34e2f04422b958894b31750a8b4@o4503963655667712.ingest.sentry.io/4503963657699328",
    integrations=[
        DjangoIntegration(),
    ],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
