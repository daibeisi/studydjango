# TODO:因为设置文件包含敏感信息，应该尽一切努力限制对它的访问。例如，更改其文件权限，以便只有您和您的 Web 服务器的用户可以读取它。
#  这在共享主机环境中尤为重要。
"""
Django settings for StudyDjango project.
Generated by 'django-admin startproject' using Django 3.2.
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # 获取项目的根路径

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "******")
CURRENT_ENV = os.environ.get('CURRENT_ENV', "dev")

if CURRENT_ENV == 'prod':
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False
    # 真正上线部署的时候不建议填成通配符的*，而是要填允许访问的主机域名
    ALLOWED_HOSTS = ["*"]
    # 默认电子邮件地址，用于网站管理员的各种自动通信。这不包括发送到ADMINS和MANAGERS的错误信息
    DEFAULT_FROM_EMAIL = 'webmaster@example.com'
    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases
    DATABASES = {
        #  PROD
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_NAME'),
            'USER': os.environ.get('POSTGRES_USER'),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
            'HOST': 'db',
            'PORT': 5432,
        }
    }
else:
    # 开启调试模式: 1.视图函数变动，自动重启服务器 2.错误详细输出，环境变量 3.生产环境中需要关闭
    DEBUG = True
    # 允许访问的域名或者IP地址
    ALLOWED_HOSTS = ["*"]
    DEFAULT_FROM_EMAIL = 'webmaster@example.com'
    # Database
    DATABASES = {
        #  DEV
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'django',
            'USER': 'daibeisi',
            'PASSWORD': 'e0@M3bP.90jwoSF!a9',
            'HOST': '127.0.0.1',
            'PORT': 5432,
        }
    }

# Application definition
# 新建app需要加到这里
INSTALLED_APPS = [
    # 默认应用，为了方便大多数项目，如果不需要某个或某些应用，你可以在运行 migrate 前毫无顾虑注释或者删除掉它们
    'django.contrib.admin',  # 管理员站点
    'django.contrib.auth',  # 认证授权系统
    'django.contrib.contenttypes',  # 内容类型框架
    'django.contrib.sessions',  # 会话框架
    'django.contrib.messages',  # 消息框架
    'django.contrib.staticfiles',  # 管理静态文件的框架
    # 注册引入应用
    'ckeditor',
    'ckeditor_uploader',
    # 注册自定义应用
    'Apps.base',
    'Apps.company',
    'Apps.blog',
]

# TODO:使用自定义用户模型，完善user应用程序
# 设置认证系统中使用的用户模型, 例如这里指定为使用user应用程序中User模型
AUTH_USER_MODEL = "blog.BlogUser"

# 中间件，响应前自动处理
MIDDLEWARE = [
    'Apps.base.middleware.TestMiddleware1',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'Apps.base.middleware.TestMiddleware2'
]

# 指项目文件下同名文件夹下的urls，项目改名字这里也要改
ROOT_URLCONF = 'StudyDjango.urls'

# 指定模板路径 BASE_DIR是项目根路径，有别的模板也要加进来
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'StudyDjango.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 语言格式

TIME_ZONE = 'Asia/Shanghai'  # 设置时区

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# 静态文件的路由（url）地址
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'upload')  # 上传的文件路径
MEDIA_URL = '/upload/'  # 上传文件url前缀

# TODO:配置登陆的url

# TODO:session设置

# ckeditor设置
CKEDITOR_UPLOAD_PATH = 'ckeditor/'  # 设置富文本编辑器的上传文件的相对路径
CKEDITOR_IMAGE_BACKEND = 'pillow'  # 设置图片处理的引擎为pillow，用于生成图片缩略图，在编辑器里浏览上传的图片
CKEDITOR_BROWSE_SHOW_DIRS = True  # 在编辑器浏览上传的图片时，图片会以路径分组、以日期排序
# 限制用户浏览图片文件的权限、只能浏览自己上传的图片、图片会传到以用户名命名的文件夹下，但超级用户可以查看所有图片
CKEDITOR_RESTRICT_BY_USER = True
CKEDITOR_CONFIGS = {
    # 配置名是default时，django-ckeditor默认使用这个设置
    'default': {
        'toolbar': (
			['div','Source','-','Save','NewPage','Preview','-','Templates'],
			['Cut','Copy','Paste','PasteText','PasteFromWord','-','Print','SpellChecker','Scayt'],
			['Undo','Redo','-','Find','Replace','-','SelectAll','RemoveFormat'],
			['Form','Checkbox','Radio','TextField','Textarea','Select','Button', 'ImageButton','HiddenField'],
			['Bold','Italic','Underline','Strike','-','Subscript','Superscript'],
			['NumberedList','BulletedList','-','Outdent','Indent','Blockquote'],
			['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'],
			['Link','Unlink','Anchor'],
			['Image','Flash','Table','HorizontalRule','Smiley','SpecialChar','PageBreak'],
			['Styles','Format','Font','FontSize'],
			['TextColor','BGColor'],
			['Maximize','ShowBlocks','-','About', 'pbckcode'],
		),
	},
    # 设置另一个django-ckeditor配置
    'test': {
        # 使用简体中文
        'language': 'zh-cn',
        # 设置富文本编辑器的宽度和高度
        'width': '660px',
        'height': '200px',
        # 设置工具栏为自定义，名字为Custom
        'toolbar':'Custom',
        # 添加富文本编辑器的工具栏按钮
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList'],
            ['Image', 'Link', 'Unlink'],
            ['Maximize']
        ]
    },
}

# TODO:待完成
# HAYSTACK_CONNECTIONS = {
#     'default': {
#         'ENGINE': 'blog.whoosh_backend_cn.WhooshEngine',
#         'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
#     },
# }
# HAYSTACK_SEARCH_RESULTS_PER_PAGE = 6
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

# TODO: 缓存

# python manage.py createcachetable
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
#         'LOCATION': 'my_cache_table',
#     }
# }

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.redis.RedisCache',  # Django 4.0中新功能
#         'LOCATION': [
#             'redis://127.0.0.1:6379', # leader
#             'redis://127.0.0.1:6378', # read-replica 1
#             'redis://127.0.0.1:6377', # read-replica 2
#         ],
#     }
# }

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'